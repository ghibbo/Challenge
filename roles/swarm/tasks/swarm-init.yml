---
- name: Check "Swarm" is enabled.
  command: docker info
  changed_when: false
  register: docker_info

- name: Create Swarm-Manager functional group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_functional
  with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
  when: "'active' in hostvars[item].docker_info.stdout_lines"
  run_once: true

- name: Create Swarm-Manager unfunctional group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_unfunctional
  with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
  when: "'active' not in hostvars[item].docker_info.stdout_lines and item == 'centos_vm1'"
  run_once: true

- name: Create Swarm-Worker joined group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_worker_joined
  with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
  when: "'active' in hostvars[item].docker_info.stdout_lines"
  run_once: true

- name: Create Swarm_Worker unjoined group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_worker_unjoined
  with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
  when: "'active' not in hostvars[item].docker_info.stdout_lines and item != 'centos_vm1'"
  run_once: true

- name: Init "Swarm Mode" on Node Manager.
  command: docker swarm init 
    --listen-addr={{ swarm_iface | default('eth1') }}:2377
    --advertise-addr={{ swarm_iface | default('eth1') }}
  when: "'swarm_manager_unfunctional' in groups"
  register: initialize_first_node
  notify: Manage-Token

# - name: Get Manager join-token.
#   command: docker swarm join-token -q manager
#   register: swarm_manager_token
#   when: initialize_first_node is changed
#   ignore_errors: "{{ ansible_check_mode }}"

# - name: Get Worker join-token.
#   command: docker swarm join-token -q worker
#   register: swarm_worker_token
#   when: initialize_first_node is changed
#   ignore_errors: "{{ ansible_check_mode }}"

- name: Add Swarm information 
  # add_host: 
  #   hostname: "{{ inventory_hostname }}"
  #   manager_token: "{{ swarm_manager_token }}"
  #   worker_token: "{{ swarm_worker_token }}"
  set_fact:
    swarm_join_token: "{{ swarm_worker_token.stdout }}"
    cacheable: yes
  ignore_errors: "{{ ansible_check_mode }}"

# - name: Swarm Info Debug
#   ansible.builtin.debug: 
#     msg: "{{ swarm_join_token }}"
#   ignore_errors: "{{ ansible_check_mode }}"

# - name: Copy Swarm information to file
#   copy: 
#     dest: /tmp/token.txt
#     content: "{{ swarm_worker_token.stdout }}"
#     mode: 0644
#   register: token_saved
#   when: initialize_first_node is changed

# - name: Save Token Locally
#   fetch:
#     src: /tmp/token.txt
#     dest: /tmp/token.txt
#     flat: yes
#   when: token_saved is changed

- name: Update Token Remotely
  copy:
    src: /tmp/token.txt
    dest: /tmp/token.txt
    mode: 0644
  when: "'swarm_worker_unjoined' in groups"

- name: Extract Token from file
  slurp:
    src: /tmp/token.txt
  register: token
  ignore_errors: "{{ ansible_check_mode }}"

# - name: Token Debug
#   ansible.builtin.debug: 
#     msg: "{{ token['content'] | b64decode }}"
#   ignore_errors: "{{ ansible_check_mode }}"

- name: Join the Swarm worker nodes.
  command: docker swarm join
        --token "{{ token['content'] | b64decode }}"
        192.168.10.101:2377
  when: "'swarm_worker_unjoined' in groups"